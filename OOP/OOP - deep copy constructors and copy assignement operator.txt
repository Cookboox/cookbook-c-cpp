#include<iostream>
#include<string>

class HasPtr
{
private:
	int i;
	std::string *ps;
public:
	HasPtr() = default;
	HasPtr(std::string &s, int i) :
		ps{ new std::string{s} }, i{ i }
	{}

	////shallow pointerlike copy ===> it will cause crash
	HasPtr(HasPtr const &source):
		ps{source.ps}, i{source.i}
	{}


	//  ********** THREE WAYS TO DEFINE A DEEP COPY CONSTRUCTOR ********** //

	//deep valuelike copy //using delegation
	HasPtr(HasPtr const &source):
		HasPtr{ *source.ps, source.i }
	{}

	//deep valuelike copy //not-using delegation // oldstyle
	HasPtr(HasPtr const &source)
	{
		ps = new std::string;
		*ps = *source.ps;
		i = source.i;
	}

	//deep valuelike copy //not-using delegation // newstyle using init list
	HasPtr(HasPtr const &source):
		ps{new std::string{*source.ps}}, i{source.i}
	{}
	


	//  ********** DEFINE A DEEP COPY ASSIGNEMENT ********** //

	//correct way 
	HasPtr& operator=(HasPtr const& rhs)
	{	
		//std::string* temp = new std::string(*rhs.ps);;
		auto temp = new std::string(*rhs.ps); // get the data form rhs
		delete ps; // free the heap, clean it from the old data 
		ps = temp; // assign the value to the current [lhs] object  
		i = rhs.i;
		return *this;
	}

	~HasPtr() { delete ps; }

	friend std::ostream& operator<<(std::ostream& os, HasPtr const& rhs);

};


std::ostream& operator<<(std::ostream& os, HasPtr const& rhs)
{
	os << rhs.i << "  " << *rhs.ps;
	return os;
}


int main()
{
	std::string s{ "hello" };

	HasPtr a(s, 10);
	HasPtr b{a};
	HasPtr c;

	std::cout << b << "\n";

	c = b;
	std::cout << c <<"\n";

	std::cin.get();

	return 0;
}